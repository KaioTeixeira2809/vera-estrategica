# main.py - Vera Estrat√©gica API v1.5.0
# Kaio / Projeto Verinha
# - Compat√≠vel com v1.2/1.3/1.4 (A360 consome conclusao_executiva TXT)
# - Acrescenta se√ß√£o "üß≠ An√°lise Estrat√©gica" (Vis√£o 2028 / E-C-K, Prop√≥sito/Valores, Fit de Portf√≥lio, Rota)
# - Mant√©m campos opcionais (objetivo, status/planos/pontos, ISP/IDP/IDCo/IDB, cronograma, baseline, escopo, financeiro)
# - Strategy Fit (ECK) + diverg√™ncia (declarado x sugerido) + 2 trilhas de pr√≥ximos passos
# - Li√ß√µes aprendidas (auto-sugeridas) + Riscos-chave
# - Modo LEAN opcional via env var (reduz verbosidade sem perder pontos-chave)

from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional, Dict, Any, List, Tuple
import unicodedata
import html
import os
import re
from datetime import datetime, date

app = FastAPI(title="Vera Estrat√©gica API", version="1.5.0")

# -------------------------------------------------------------------------------------------------
# Feature flags e metas simples
# -------------------------------------------------------------------------------------------------
FEATURES = {
    "enable_strategy_fit": True,
    "enable_lessons_learned": True,
    "enable_finance_pack": True,
    "enable_schedule_pack": True,
    "enable_external_evidence": os.getenv("EXTERNAL_EVIDENCE_ENABLED", "false").lower() == "true",
    "enable_strategic_analysis": True,  # NOVO: se√ß√£o estrat√©gica (aba)
}
TARGETS = {
    "cpi": 0.90,
    "spi": 0.95,
    "idx_meta": 1.00,  # ISP / IDP / IDCo / IDB (abaixo √© pior; acima √© melhor)
}
LEAN_MODE = os.getenv("LEAN_MODE", "false").lower() == "true"

# -------------------------------------------------------------------------------------------------
# Models
# -------------------------------------------------------------------------------------------------
class TextoRequest(BaseModel):
    texto: str

class ProjetoRequest(BaseModel):
    # Campos j√° existentes
    nome_projeto: Optional[str] = None
    cpi: Optional[str] = None
    spi: Optional[str] = None
    avanco_fisico: Optional[str] = None
    avanco_financeiro: Optional[str] = None
    tipo_contrato: Optional[str] = None
    stakeholders: Optional[str] = None
    observacoes: Optional[str] = None
    pilar: Optional[str] = None
    # Novos campos (opcionais)
    objetivo: Optional[str] = None
    resumo_status: Optional[List[str]] = None  # lista de bullets
    planos_proximo_periodo: Optional[List[str]] = None
    pontos_atencao: Optional[List[str]] = None
    indicadores: Optional[Dict[str, Any]] = None  # {"isp":..., "idp":..., "idco":..., "idb":...}
    data_final_planejada: Optional[str] = None  # "YYYY-MM-DD" ou "DD/MM/YYYY"
    baseline: Optional[Dict[str, Any]] = None  # {"prazo":{"data_planejada":...}, "custo":{"capex_aprovado":...}, "escopo":"..."}
    escopo: Optional[str] = None
    cronograma: Optional[Dict[str, Any]] = None  # {"tarefas":[{"nome":..., "inicio":..., "fim":..., "%/pct":..., "critica":True/False}, ...]}
    financeiro: Optional[Dict[str, Any]] = None  # {"capex_aprovado":..., "capex_comp":..., "capex_exec":..., "ev":..., "pv":..., "ac":..., "eac":..., "vac":...}

# -------------------------------------------------------------------------------------------------
# Helpers de normaliza√ß√£o e parsing
# -------------------------------------------------------------------------------------------------
def normalize(s: Optional[str]) -> str:
    if not s:
        return ""
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return s.lower().strip()

def to_number(s: Optional[str]) -> Optional[float]:
    if s is None:
        return None
    s = str(s).strip().replace(" ", "")
    s = s.replace("%", "")
    if "," in s and "." in s:
        s = s.replace(".", "").replace(",", ".")
    elif "," in s:
        s = s.replace(",", ".")
    try:
        return float(s)
    except:
        return None

def percent_to_number(s: Optional[str]) -> Optional[float]:
    if s is None:
        return None
    s = str(s).strip()
    if s.endswith("%"):
        s = s[:-1]
    return to_number(s)

def parse_date(s: Optional[str]) -> Optional[date]:
    if not s:
        return None
    s = str(s).strip()
    for fmt in ("%Y-%m-%d", "%d/%m/%Y", "%d-%m-%Y"):
        try:
            return datetime.strptime(s, fmt).date()
        except:
            continue
    return None

# -------------------------------------------------------------------------------------------------
# Parser do texto colado no A360 (r√≥tulos + blocos)
# -------------------------------------------------------------------------------------------------
def parse_from_text(texto: str) -> Dict[str, Any]:
    # Campos base com valores default
    campos: Dict[str, Any] = {
        "nome_projeto": "N√£o informado",
        "cpi": "N√£o informado",
        "spi": "N√£o informado",
        "avanco_fisico": "N√£o informado",
        "avanco_financeiro": "N√£o informado",
        "tipo_contrato": "N√£o informado",
        "stakeholders": "N√£o informado",
        "observacoes": "N√£o informado",
        "pilar": "N√£o informado",
        # Novos
        "objetivo": "N√£o informado",
        "resumo_status": [],
        "planos_proximo_periodo": [],
        "pontos_atencao": [],
        "indicadores": {},  # isp/idp/idco/idb
        "data_final_planejada": "N√£o informado",
        "baseline": {},  # prazo/custo/escopo
        "escopo": "N√£o informado",
        "cronograma": {"tarefas": []},
        "financeiro": {},
    }
    lines = texto.splitlines()
    i = 0
    # Conjunto de r√≥tulos conhecidos (normalizados)
    labels = {
        "nome do projeto", "objetivo",
        "resumo status", "resumo da situacao atual", "resumo da situa√ß√£o atual",
        "planos proximo periodo", "planos pr√≥ximo periodo", "planos para o proximo periodo",
        "pontos de atencao", "pontos de aten√ß√£o",
        "cpi", "spi", "isp", "idp", "idco", "idb",
        "avanco fisico", "avanco financeiro",
        "tipo de contrato", "stakeholders",
        "data final planejada",
        "baseline prazo", "baseline custo (capex aprovado)", "baseline custo",
        "escopo",
        "observacoes", "observa√ß√µes",
        "tarefas", "financeiro",
        "pilar"
    }

    def is_label(line: str) -> Tuple[bool, str, str]:
        if ":" not in line:
            return False, "", ""
        k, v = line.split(":", 1)
        nk = normalize(k)
        return (nk in labels, nk, v.strip())

    def collect_bullets(start_idx: int) -> Tuple[List[str], int]:
        bullets: List[str] = []
        j = start_idx
        while j < len(lines):
            raw = lines[j].strip()
            if raw == "":
                break
            has, _, _ = is_label(raw)
            if has:
                break
            if raw.startswith("- "):
                bullets.append(raw[2:].strip())
            else:
                if bullets:
                    bullets[-1] = (bullets[-1] + " " + raw).strip()
                else:
                    bullets.append(raw)
            j += 1
        return bullets, j

    def parse_task_line(raw: str) -> Optional[Dict[str, Any]]:
        # Tenta key:value por linhas
        parts = [p.strip() for p in raw.split("\n")]
        d: Dict[str, Any] = {}
        for p in parts:
            if ":" in p:
                k, vv = p.split(":", 1)
                d[normalize(k)] = vv.strip()
        if not d:
            return None
        nome = d.get("nome") or raw.replace("- ", "").strip()
        ini = parse_date(d.get("inicio") or d.get("in√≠cio"))
        fim = parse_date(d.get("fim"))
        pct = to_number(d.get("%") or d.get("pct"))
        crit = normalize(d.get("critica") or d.get("cr√≠tica")) in ("sim", "true", "critica", "cr√≠tica")
        return {"nome": nome, "inicio": ini, "fim": fim, "pct": pct, "critica": crit}

    while i < len(lines):
        line = lines[i].strip()
        if not line:
            i += 1
            continue
        has, nk, val = is_label(line)
        if not has:
            i += 1
            continue

        # R√≥tulos com bloco de bullets subsequente
        if nk in ("resumo status", "resumo da situacao atual", "resumo da situa√ß√£o atual"):
            i += 1
            bullets, j = collect_bullets(i)
            campos["resumo_status"] = bullets
            i = j
            continue

        if nk in ("planos proximo periodo", "planos pr√≥ximo periodo", "planos para o proximo periodo"):
            i += 1
            bullets, j = collect_bullets(i)
            campos["planos_proximo_periodo"] = bullets
            i = j
            continue

        if nk in ("pontos de atencao", "pontos de aten√ß√£o"):
            i += 1
            bullets, j = collect_bullets(i)
            campos["pontos_atencao"] = bullets
            i = j
            continue

        if nk == "tarefas":
            i += 1
            tasks: List[Dict[str, Any]] = []
            while i < len(lines):
                raw = lines[i].strip()
                if raw == "":
                    break
                has2, _, _ = is_label(raw)
                if has2:
                    break
                if raw.startswith("-"):
                    t = parse_task_line(raw.lstrip("-").strip())
                    if t:
                        tasks.append(t)
                i += 1
            campos["cronograma"] = {"tarefas": tasks}
            continue

        if nk == "financeiro":
            i += 1
            fin: Dict[str, Any] = {}
            while i < len(lines):
                raw = lines[i].strip()
                if raw == "":
                    break
                has2, _, _ = is_label(raw)
                if has2:
                    break
                if ":" in raw:
                    k, v = raw.split(":", 1)
                    kn = normalize(k)
                    fin[kn] = v.strip()
                i += 1
            campos["financeiro"] = fin
            continue

        # R√≥tulos simples (uma linha)
        if nk == "nome do projeto":
            campos["nome_projeto"] = val or "N√£o informado"
        elif nk == "objetivo":
            campos["objetivo"] = val or "N√£o informado"
        elif nk in ("cpi", "spi", "isp", "idp", "idco", "idb"):
            ind = campos.get("indicadores") or {}
            if nk in ("cpi", "spi"):
                campos[nk] = val or "N√£o informado"
            else:
                ind[nk] = val
            campos["indicadores"] = ind
        elif nk == "avanco fisico":
            campos["avanco_fisico"] = val or "N√£o informado"
        elif nk == "avanco financeiro":
            campos["avanco_financeiro"] = val or "N√£o informado"
        elif nk == "tipo de contrato":
            campos["tipo_contrato"] = val or "N√£o informado"
        elif nk == "stakeholders":
            campos["stakeholders"] = val or "N√£o informado"
        elif nk == "data final planejada":
            campos["data_final_planejada"] = val or "N√£o informado"
        elif nk == "baseline prazo":
            b = campos.get("baseline") or {}
            b["prazo"] = {"data_planejada": val}
            campos["baseline"] = b
        elif nk in ("baseline custo (capex aprovado)", "baseline custo"):
            b = campos.get("baseline") or {}
            bb = b.get("custo") or {}
            bb["capex_aprovado"] = val
            b["custo"] = bb
            campos["baseline"] = b
        elif nk == "escopo":
            campos["escopo"] = val or "N√£o informado"
        elif nk in ("observacoes", "observa√ß√µes"):
            campos["observacoes"] = val or "N√£o informado"
        elif nk == "pilar":
            campos["pilar"] = val or "N√£o informado"
        i += 1

    return campos

# -------------------------------------------------------------------------------------------------
# Heur√≠sticas: risco, pilar, cronograma, baseline, financeiro
# -------------------------------------------------------------------------------------------------
def calcular_score_risco_base(campos_num: Dict[str, Optional[float]], observacoes: str, trace: List[str]) -> float:
    score = 0.0
    cpi = campos_num.get("cpi_num")
    spi = campos_num.get("spi_num")
    fis = campos_num.get("avanco_fisico_num")
    fin = campos_num.get("avanco_financeiro_num")

    # CPI
    if cpi is not None:
        if cpi < 0.85: score += 5; trace.append("CPI<0,85: +5")
        elif cpi < 0.90: score += 3; trace.append("0,85‚â§CPI<0,90: +3")
    # SPI
    if spi is not None:
        if spi < 0.90: score += 5; trace.append("SPI<0,90: +5")
        elif spi < 0.95: score += 3; trace.append("0,90‚â§SPI<0,95: +3")
    # Gap f√≠sico x financeiro
    if fis is not None and fin is not None:
        gap = abs(fis - fin)
        if gap >= 15: score += 2; trace.append("Gap f√≠sico x financeiro ‚â•15pp: +2")
        elif gap >= 8: score += 1; trace.append("Gap f√≠sico x financeiro ‚â•8pp: +1")
    # Palavras-chave em observa√ß√µes
    obs_norm = normalize(observacoes)
    keywords = ["atraso", "licenc", "embargo", "paralis", "fornecedor", "pressao", "custo", "multas", "sancao", "risco", "equip", "critico"]
    pontos = sum(1 for k in keywords if k in obs_norm)
    if pontos > 0:
        add = min(4, pontos); score += add; trace.append(f"Keywords observa√ß√µes (+{add})")
    return score

def risco_por_indices(ind: Dict[str, Optional[float]], trace: List[str]) -> float:
    score = 0.0
    def add(k: str, v: Optional[float]):
        nonlocal score
        if v is None: return
        if v < 0.90: score += 3; trace.append(f"{k.upper()}<0,90: +3")
        elif v < TARGETS["idx_meta"]: score += 1; trace.append(f"0,90‚â§{k.upper()}<1,00: +1")
        else: trace.append(f"{k.upper()}‚â•1,00: +0")
    for k in ("isp", "idp", "idco", "idb"):
        add(k, ind.get(k))
    return score

def risco_por_cronograma(tarefas: List[Dict[str, Any]], trace: List[str]) -> float:
    score = 0.0
    hoje = date.today()
    for t in tarefas:
        fim = t.get("fim")
        pct = t.get("pct")
        crit = t.get("critica", False)
        atrasado = (isinstance(fim, date) and fim < hoje and (pct is None or pct < 100))
        if atrasado and crit:
            score += 3; trace.append(f"Tarefa cr√≠tica atrasada: {t.get('nome','')} (+3)")
        elif atrasado:
            score += 1; trace.append(f"Tarefa atrasada: {t.get('nome','')} (+1)")
        if pct is not None and pct < 30 and crit:
            score += 1; trace.append(f"Tarefa cr√≠tica <30%: {t.get('nome','')} (+1)")
    return score

def risco_por_baseline_financeiro(baseline: Dict[str, Any], fin: Dict[str, Any], trace: List[str]) -> float:
    score = 0.0
    # Financeiro: VAC < 0, EAC > CAPEX aprovado
    capex_aprovado = to_number((baseline.get("custo") or {}).get("capex_aprovado"))
    eac = to_number(fin.get("eac"))
    vac = to_number(fin.get("vac"))
    if vac is not None and vac < 0:
        score += 3; trace.append("VAC < 0 (proje√ß√£o acima do aprovado): +3")
    if capex_aprovado is not None and eac is not None and eac > capex_aprovado:
        score += 2; trace.append("EAC > CAPEX aprovado: +2")
    comp = to_number(fin.get("capex_comp") or fin.get("capex comprometido"))
    if capex_aprovado is not None and comp is not None and comp > capex_aprovado:
        score += 2; trace.append("Comprometido > Aprovado: +2")
    return score

def classificar_risco(score: float) -> str:
    # Pol√≠tica Kaio: sem "Cr√≠tico" (consolida em "Alto")
    # Mantido v1.3.0: Alto ‚â• 7 (ajust√°vel aqui para ‚â•10, se desejar)
    if score >= 7: return "Alto"
    elif score >= 4: return "M√©dio"
    else: return "Baixo"

def inferir_pilar(campos: Dict[str, Any], campos_num: Dict[str, Optional[float]], indicadores: Dict[str, Optional[float]], trace: List[str]) -> Optional[str]:
    obs = normalize(campos.get("observacoes", ""))
    objetivo = normalize(campos.get("objetivo", ""))
    escopo = normalize(campos.get("escopo", ""))
    resumo_join = " ".join([normalize(x) for x in (campos.get("resumo_status") or [])])
    planos_join = " ".join([normalize(x) for x in (campos.get("planos_proximo_periodo") or [])])
    texto_base = " ".join([obs, objetivo, escopo, resumo_join, planos_join])

    cpi = campos_num.get("cpi_num")
    spi = campos_num.get("spi_num")
    isp, idp, idco, idb = (indicadores.get("isp"), indicadores.get("idp"), indicadores.get("idco"), indicadores.get("idb"))

    score_exc = 0
    score_cli = 0
    score_cap = 0

    # Palavras-chave por pilar
    if any(k in texto_base for k in ["processo", "estrutura", "governanca", "governan√ßa", "rituais", "metas", "desdobramento", "coerencia", "coer√™ncia", "execucao", "execu√ß√£o"]):
        score_exc += 2
    if any(k in texto_base for k in ["cliente", "experiencia", "experi√™ncia", "sla", "jornada", "confiabilidade", "satisfacao", "satisfa√ß√£o", "atendimento"]):
        score_cli += 2
    if any(k in texto_base for k in ["capex", "investimento", "priorizacao", "prioriza√ß√£o", "retorno", "vpl", "tir", "payback", "disciplina de capital"]):
        score_cap += 2

    # M√©tricas puxando Excel√™ncia quando abaixo alvo
    if (cpi is not None and cpi < TARGETS["cpi"]) or (spi is not None and spi < TARGETS["spi"]):
        score_exc += 2; trace.append("ECK hint‚ÜíExcel√™ncia (CPI/SPI abaixo do target)")
    for v in (isp, idp, idco, idb):
        if v is not None and v < TARGETS["idx_meta"]:
            score_exc += 1

    # Capital quando √™nfase financeira/retorno
    fin_capex = to_number((campos.get("financeiro") or {}).get("capex_aprovado"))
    if any(k in texto_base for k in ["retorno", "vpl", "tir", "payback"]) or fin_capex:
        score_cap += 1

    trio = [("Excel√™ncia Organizacional", score_exc), ("Foco no Cliente", score_cli), ("Aloca√ß√£o Estrat√©gica de Capital", score_cap)]
    trio.sort(key=lambda x: x[1], reverse=True)
    if trio[0][1] == 0:
        return None
    sugerido = trio[0][0]
    trace.append(f"ECK sugerido: {sugerido} (scores: E={score_exc}, C={score_cli}, K={score_cap})")
    return sugerido

def justificativa_pilar_eck(pilar: str) -> str:
    p = normalize(pilar)
    if "excelencia" in p:
        return ("Excel√™ncia Organizacional: alinhar pessoas, processos, estrutura e incentivos √† estrat√©gia; "
                "desdobrar metas para coer√™ncia entre √°reas e execu√ß√£o coordenada.")
    if "cliente" in p:
        return ("Foco no Cliente: colocar o cliente no centro, entender necessidades, antecipar solu√ß√µes "
                "e melhorar continuamente as jornadas com confiabilidade e SLAs.")
    if "alocacao" in p:
        return ("Aloca√ß√£o Estrat√©gica de Capital: priorizar investimentos que maximizem valor no longo prazo, "
                "com disciplina de capital e sele√ß√£o criteriosa (VPL/TIR ajustadas a risco).")
    return f"Pilar declarado: {pilar}"

def split_stakeholders(stakeholders: str) -> List[str]:
    if not stakeholders or stakeholders == "N√£o informado":
        return []
    parts: List[str] = []
    for sep in [";", ",", "\\n", "\n"]:
        if sep in stakeholders:
            parts = [p.strip() for p in stakeholders.split(sep)]
            break
    if not parts:
        parts = [stakeholders.strip()]
    return [p for p in parts if p]

def gerar_proximos_passos(cpi: Optional[float], spi: Optional[float], gap_pf: Optional[float],
                          obs: str, pilar_final: str, stakeholders: str) -> List[str]:
    passos: List[str] = []
    if cpi is not None and cpi < TARGETS["cpi"]:
        passos += ["Estabelecer plano de conten√ß√£o de custos e varia√ß√£o de escopo (D+7).",
                   "Revisar curvas de medi√ß√£o e baseline financeiro (D+10)."]
    if spi is not None and spi < TARGETS["spi"]:
        passos += ["Replanejar caminho cr√≠tico e renegociar marcos cr√≠ticos (D+5).",
                   "Avaliar compress√£o de cronograma/fast-track onde aplic√°vel (D+10)."]
    if gap_pf is not None:
        if gap_pf >= 15: passos += ["Investigar assimetria f√≠sico x financeiro (‚â•15pp): auditoria de medi√ß√£o (D+7)."]
        elif gap_pf >= 8: passos += ["Alinhar crit√©rios de medi√ß√£o f√≠sico x financeiro (‚â•8pp) (D+10)."]
    obs_n = normalize(obs)
    if "fornecedor" in obs_n:
        passos += ["Conduzir reuni√£o executiva com fornecedor cr√≠tico e plano 5W2H (D+3)."]
    if "equip" in obs_n or "equipamento" in obs_n or "critico" in obs_n:
        passos += ["Ativar conting√™ncia p/ equipamentos cr√≠ticos e alternativas log√≠sticas (D+7)."]
    if "licenc" in obs_n or "embargo" in obs_n or "paralis" in obs_n:
        passos += ["Acionar frente regulat√≥ria/jur√≠dica para destravar licen√ßas/embargos (D+3)."]
    p = normalize(pilar_final)
    if "excelencia" in p:
        passos += ["Desdobrar metas operacionais e RACI de governan√ßa semanal (D+7).",
                   "Implantar rituais de performance e indicadores leading/lagging (D+14)."]
    if "cliente" in p:
        passos += ["Mapear jornada do cliente e ajustar SLAs de comunica√ß√£o (D+15).",
                   "Rodar pulso de satisfa√ß√£o/NPS at√© o pr√≥ximo marco (D+30)."]
    if "alocacao" in p:
        passos += ["Repriorizar CAPEX priorizando retorno ajustado a risco (D+20).",
                   "Revisar business case e op√ß√µes de escopo/financiamento (D+30)."]
    owners = split_stakeholders(stakeholders)
    if owners: passos += [f"Respons√°veis sugeridos: {', '.join(owners[:3])}."]
    # dedup
    dedup: List[str] = []
    seen = set()
    for it in passos:
        if it not in seen:
            seen.add(it); dedup.append(it)
    return dedup

def listar_riscos(campos_num: Dict[str, Optional[float]],
                  observacoes: str,
                  indicadores: Dict[str, Optional[float]],
                  tarefas: List[Dict[str, Any]],
                  baseline: Dict[str, Any],
                  fin: Dict[str, Any]) -> List[str]:
    riscos: List[str] = []
    cpi = campos_num.get("cpi_num")
    spi = campos_num.get("spi_num")
    fis = campos_num.get("avanco_fisico_num")
    finv = campos_num.get("avanco_financeiro_num")

    if cpi is not None:
        if cpi < 0.85: riscos.append("Custo: CPI < 0,85 ‚Äî forte risco or√ßament√°rio.")
        elif cpi < TARGETS["cpi"]: riscos.append("Custo: CPI entre 0,85 e 0,90 ‚Äî press√£o de custos.")
    if spi is not None:
        if spi < 0.90: riscos.append("Prazo: SPI < 0,90 ‚Äî alto risco de atraso.")
        elif spi < TARGETS["spi"]: riscos.append("Prazo: SPI entre 0,90 e 0,95 ‚Äî risco de deslizamento.")
    if fis is not None and finv is not None:
        gap = abs(fis - finv)
        if gap >= 15: riscos.append("Execu√ß√£o: gap f√≠sico x financeiro ‚â•15pp ‚Äî risco de inconsist√™ncia de medi√ß√£o.")
        elif gap >= 8: riscos.append("Execu√ß√£o: gap f√≠sico x financeiro ‚â•8pp ‚Äî aten√ß√£o √† coer√™ncia de medi√ß√£o.")
    # √çndices meta 1,00
    for k in ("isp", "idp", "idco", "idb"):
        v = indicadores.get(k)
        if v is not None and v < TARGETS["idx_meta"]:
            riscos.append(f"√çndice {k.upper()} abaixo de 1,00 ({v:.2f}).")
    # Cronograma
    hoje = date.today()
    for t in tarefas:
        nome = t.get("nome", "")
        fim = t.get("fim")
        pct = t.get("pct")
        crit = t.get("critica", False)
        atrasado = (isinstance(fim, date) and fim < hoje and (pct is None or pct < 100))
        if atrasado and crit:
            riscos.append(f"Cronograma: tarefa cr√≠tica atrasada ‚Äî {nome}.")
        elif atrasado:
            riscos.append(f"Cronograma: tarefa atrasada ‚Äî {nome}.")
    # Financeiro
    vac = to_number(fin.get("vac"))
    capex_aprovado = to_number((baseline.get("custo") or {}).get("capex_aprovado"))
    eac = to_number(fin.get("eac"))
    comp = to_number(fin.get("capex_comp") or fin.get("capex comprometido"))
    if vac is not None and vac < 0:
        riscos.append("Financeiro: VAC negativo ‚Äî proje√ß√£o acima do aprovado.")
    if capex_aprovado is not None and eac is not None and eac > capex_aprovado:
        riscos.append("Financeiro: EAC acima do CAPEX aprovado.")
    if capex_aprovado is not None and comp is not None and comp > capex_aprovado:
        riscos.append("Financeiro: comprometido acima do aprovado.")
    # Observa√ß√µes (keywords)
    obs = normalize(observacoes)
    mapping = [
        ("licenc", "Regulat√≥rio: risco de licen√ßas/autoriza√ß√µes."),
        ("embargo", "Regulat√≥rio: risco de embargo/interdi√ß√£o."),
        ("paralis", "Opera√ß√£o: risco de paralisa√ß√£o de frentes."),
        ("fornecedor", "Suprimentos: depend√™ncia de fornecedor cr√≠tico."),
        ("pressao", "Financeiro: press√£o de custos em pacotes."),
        ("equip", "T√©cnico: fornecimento de equipamentos sens√≠vel."),
        ("critico", "Risco cr√≠tico citado em observa√ß√µes."),
        ("risco", "Risco adicional citado em observa√ß√µes.")
        ]
    for key, msg in mapping:
        if key in obs and msg not in riscos:
            riscos.append(msg)
    # dedup
    out: List[str] = []
    seen = set()
    for r in riscos:
        if r not in seen:
            seen.add(r); out.append(r)
    return out

def strategy_fit(campos: Dict[str, Any],
                 campos_num: Dict[str, Optional[float]],
                 indicadores: Dict[str, Optional[float]]) -> Dict[str, Any]:
    if not FEATURES["enable_strategy_fit"]:
        return {"score": None, "pilar_sugerido": None, "justificativa": None}
    objetivo = normalize(campos.get("objetivo", ""))
    resumo_join = " ".join([normalize(x) for x in (campos.get("resumo_status") or [])])
    escopo = normalize(campos.get("escopo", ""))
    obs = normalize(campos.get("observacoes", ""))
    planos_join = " ".join([normalize(x) for x in (campos.get("planos_proximo_periodo") or [])])
    texto = " ".join([objetivo, resumo_join, escopo, obs, planos_join])

    # Scores por pilar
    score_exc = 0
    score_cli = 0
    score_cap = 0

    # Marcadores (simples e calibr√°veis)
    if any(k in texto for k in ["processo", "estrutura", "governanca", "rituais", "metas", "desdobramento", "coerencia", "execucao"]):
        score_exc += 20
    if any(k in texto for k in ["cliente", "experiencia", "sla", "jornada", "confiabilidade", "satisfacao", "atendimento"]):
        score_cli += 20
    if any(k in texto for k in ["capex", "investimento", "priorizacao", "retorno", "vpl", "tir", "payback"]):
        score_cap += 20

    # M√©tricas (puxam Excel√™ncia quando abaixo)
    cpi, spi = campos_num.get("cpi_num"), campos_num.get("spi_num")
    for (v, alvo) in [(cpi, TARGETS["cpi"]), (spi, TARGETS["spi"])]:
        if v is not None and v < alvo:
            score_exc += 10
    for v in (indicadores.get("isp"), indicadores.get("idp"), indicadores.get("idco"), indicadores.get("idb")):
        if v is not None and v < TARGETS["idx_meta"]:
            score_exc += 5

    raw_sum = score_exc + score_cli + score_cap
    if raw_sum == 0:
        return {"score": 0, "pilar_sugerido": None, "justificativa": "Sem sinais suficientes."}
    trio = [("Excel√™ncia Organizacional", score_exc), ("Foco no Cliente", score_cli), ("Aloca√ß√£o Estrat√©gica de Capital", score_cap)]
    trio.sort(key=lambda x: x[1], reverse=True)
    pilar_sugerido, top = trio[0]
    score = int(min(100, max(0, (top / max(1, raw_sum)) * 100)))
    justificativa = justificativa_pilar_eck(pilar_sugerido)
    return {"score": score, "pilar_sugerido": pilar_sugerido, "justificativa": justificativa}

def gerar_licoes_aprendidas(campos: Dict[str, Any],
                            campos_num: Dict[str, Optional[float]],
                            kpis: Dict[str, Any],
                            tarefas: List[Dict[str, Any]],
                            riscos_chave: List[str]) -> List[Dict[str, str]]:
    if not FEATURES["enable_lessons_learned"]:
        return []
    itens: List[Dict[str, str]] = []
    owners = split_stakeholders(campos.get("stakeholders", ""))
    owner = owners[0] if owners else "PMO/Projeto"
    # Padr√µes b√°sicos
    cpi = campos_num.get("cpi_num"); spi = campos_num.get("spi_num")
    if cpi is not None and cpi < TARGETS["cpi"]:
        itens.append({
            "problema": "Desvio de custo (CPI abaixo da meta).",
            "causa_raiz": "Estimativas subavaliadas e controle de mudan√ßas sem gate claro.",
            "contramedida": "Instalar Change Control Board e refor√ßar baseline; auditoria de medi√ß√£o financeira.",
            "owner": owner, "prazo": "D+14", "categoria": "Financeiro/Controle"
        })
    if spi is not None and spi < TARGETS["spi"]:
        itens.append({
            "problema": "Risco de atraso (SPI abaixo da meta).",
            "causa_raiz": "Caminho cr√≠tico sem replanejamento tempestivo.",
            "contramedida": "Replanejar caminho cr√≠tico e instituir rito semanal com EVM.",
            "owner": owner, "prazo": "D+7", "categoria": "Prazo/Planejamento"
        })
    gap_pf = kpis.get("gap_pf")
    if gap_pf is not None and gap_pf >= 15:
        itens.append({
            "problema": "Assimetria f√≠sico x financeiro ‚â•15pp.",
            "causa_raiz": "Crit√©rios de medi√ß√£o divergentes entre equipes.",
            "contramedida": "Unificar crit√©rios e auditar 3 pacotes cr√≠ticos.",
            "owner": owner, "prazo": "D+10", "categoria": "Execu√ß√£o/Medi√ß√£o"
        })
    # Tarefa cr√≠tica atrasada
    hoje = date.today()
    for t in tarefas:
        if t.get("critica") and isinstance(t.get("fim"), date) and t["fim"] < hoje and (t.get("pct") or 0) < 100:
            itens.append({
                "problema": f"Tarefa cr√≠tica atrasada: {t.get('nome','')}.",
                "causa_raiz": "Sequenciamento de frentes e restri√ß√µes n√£o modeladas.",
                "contramedida": "Aplicar t√©cnica de remo√ß√£o de restri√ß√µes (LPS) e travas de pr√©-requisitos.",
                "owner": owner, "prazo": "D+5", "categoria": "Planejamento/Execu√ß√£o"
            })
            break
    return itens[:5]

# -------------------------------------------------------------------------------------------------
# NOVO: An√°lise Estrat√©gica (Vis√£o 2028/E-C-K, Prop√≥sito/Valores, Fit de Portf√≥lio, Rota)
# -------------------------------------------------------------------------------------------------
def _score_prop_valores(texto: str) -> int:
    """
    Heur√≠stica simples para coer√™ncia com Prop√≥sito e Valores Eletrobras.
    +2 para cada marcador encontrado (m√°x 10).
    """
    marcadores = [
        "seguranca", "seguran√ßa",   # Vida em primeiro lugar
        "integridade",              # Integridade sempre
        "pessoas", "time",          # Nossa energia vem das pessoas
        "excelencia", "excel√™ncia", # Nossa excel√™ncia faz a diferen√ßa
        "inovar", "inovacao", "inova√ß√£o", # Inovar para gerar valor
        "descarbon", "sustentavel", "sustent√°vel", "esg"  # Cuidar do planeta
    ]
    t = normalize(texto)
    pontos = 0
    seen = set()
    for m in marcadores:
        if m in t and m not in seen:
            seen.add(m); pontos += 2
            if pontos >= 10:
                break
    return min(10, pontos)

def _classificar_portfolio(texto: str) -> Tuple[str, str]:
    """
    Classifica fit de portf√≥lio (Core / Opcionalidade / Explorat√≥rio) por keywords setoriais.
    Retorna (categoria, justificativa).
    """
    t = normalize(texto)
    core_kw = ["transmissao", "transmiss√£o", "lt", "linhas de transmissao", "subestacao", "subesta√ß√£o",
               "uhe", "hidreletrica", "hidrel√©trica", "parque eolico onshore", "solar onshore",
               "rm transmissao", "rm gera√ß√£o", "geracao", "gera√ß√£o"]
    opc_kw = ["armazenamento", "bateria", "adi√ß√£o de potencia", "adi√ß√£o de pot√™ncia",
              "repotenciacao", "repotencia√ß√£o", "atualizacao", "modernizacao", "moderniza√ß√£o",
              "gestao de ativos", "gest√£o de ativos", "eficiencia energetica", "efici√™ncia energ√©tica",
              "contratos corporativos", "ppa corporativo"]
    exp_kw = ["eolica offshore", "e√≥lica offshore", "hidrogenio verde", "hidrog√™nio verde",
              "datacenter", "data center", "telecom", "criptomoeda", "crypto", "internacionalizacao", "internacionaliza√ß√£o",
              "gd flutuante", "offshore", "h2v"]
    if any(k in t for k in core_kw):
        return "Core", "Aderente ao core (Transmiss√£o/Gera√ß√£o renov√°vel e O&M)."
    if any(k in t for k in opc_kw):
        return "Opcionalidade", "Amplia portf√≥lio com alavancas adjacentes (armazenamento/repotencia√ß√£o/efici√™ncia)."
    if any(k in t for k in exp_kw):
        return "Explorat√≥rio", "Trilhas emergentes com maturidade/setor ainda em evolu√ß√£o."
    return "Indefinido", "Sem sinais setoriais claros; classificar com mais dados."

def _label_de_nivel(score: int) -> str:
    if score >= 70: return "Alto"
    if score >= 45: return "M√©dio"
    return "Baixo"

def analise_estrategica(campos: Dict[str, Any],
                        strategy: Dict[str, Any],
                        classificacao_risco: str,
                        divergente: bool,
                        pilar_declarado: str,
                        pilar_sugerido: Optional[str]) -> Dict[str, Any]:
    """
    Consolida pitacos estrat√©gicos:
      - Alinhamento com Vis√£o 2028 / E-C-K (usa strategy_fit + penaliza√ß√µes/bonifica√ß√µes)
      - Coer√™ncia com Prop√≥sito/Valores
      - Fit de Portf√≥lio (Core / Opcionalidade / Explorat√≥rio)
      - Faz sentido para a companhia? (Sim/Parcialmente/N√£o)
      - Rota recomendada (Acelerar/Seguir com salvaguardas/Pivotar/Pausar)
      - Recomenda√ß√µes (Continuar / Ajustar / Parar)
    """
    objetivo = campos.get("objetivo", "") or ""
    escopo = campos.get("escopo", "") or ""
    observacoes = campos.get("observacoes", "") or ""
    resumo = " ".join(campos.get("resumo_status") or [])
    planos = " ".join(campos.get("planos_proximo_periodo") or [])
    texto = " ".join([objetivo, escopo, observacoes, resumo, planos])

    # Base: strategy_fit score (0-100)
    base = strategy.get("score") or 0

    # Penaliza√ß√µes/Aumentos:
    # - Diverg√™ncia Pilar declarado x sugerido: -10
    # - Risco: Alto -20, M√©dio -10, Baixo 0
    # - Prop√≥sito/Valores: +0..+10
    ajuste = 0
    if divergente:
        ajuste -= 10
    if classificacao_risco == "Alto":
        ajuste -= 20
    elif classificacao_risco == "M√©dio":
        ajuste -= 10

    pv_bonus = _score_prop_valores(texto)  # 0..10
    ajuste += pv_bonus

    alinhamento_score = int(max(0, min(100, base + ajuste)))
    alinhamento_label = _label_de_nivel(alinhamento_score)

    # Fit de Portf√≥lio
    portfolio_fit, portfolio_msg = _classificar_portfolio(texto)

    # Faz sentido?
    sentido = "Sim" if (alinhamento_score >= 60 and portfolio_fit in ("Core", "Opcionalidade")) else ("Parcialmente" if alinhamento_score >= 40 else "N√£o")

    # Rota recomendada (regras simples)
    if classificacao_risco == "Alto" and alinhamento_score < 50:
        rota = "Pausar/Pivotar"
        rota_msg = "Pausar decis√µes de compromisso irrevers√≠vel; pivotar escopo para elevar alinhamento E‚ÄëC‚ÄëK e reduzir risco."
    elif classificacao_risco == "Alto" and alinhamento_score >= 50:
        rota = "Seguir com salvaguardas"
        rota_msg = "Manter andamento com gates de decis√£o, refor√ßo de governan√ßa e mitigadores financeiros/cronograma."
    elif classificacao_risco == "M√©dio":
        rota = "Seguir"
        rota_msg = "Prosseguir com controle ativo (EVM/rituais), validando hip√≥teses de cliente/retorno e disciplina de capital."
    else:  # Risco Baixo
        rota = "Acelerar" if alinhamento_score >= 70 else "Seguir"
        rota_msg = "Capturar ganhos r√°pidos; aprofundar diferencial no pilar dominante." if rota == "Acelerar" else "Seguir plano com monitoramento padr√£o."

    # Recomenda√ß√µes estrat√©gicas (Continuar/Ajustar/Parar)
    p_final = pilar_sugerido or pilar_declarado or "N√£o informado"
    p_norm = normalize(p_final)
    continuar: List[str] = []
    ajustar: List[str] = []
    parar: List[str] = []

    # Continuar conforme pilar
    if "cliente" in p_norm:
        continuar += ["Profundidade em necessidades do cliente (descoberta cont√≠nua) e SLAs de jornada."]
    if "excelencia" in p_norm:
        continuar += ["Rituais semanais de performance, metas desdobradas e coer√™ncia entre √°reas."]
    if "alocacao" in p_norm:
        continuar += ["Disciplina de capital (VPL/TIR ajustadas a risco) e revis√£o peri√≥dica do business case."]

    # Ajustar conforme portfolio_fit
    if portfolio_fit == "Explorat√≥rio":
        ajustar += ["Definir hip√≥teses claras de valor/tecnologia e est√°gios (MVP‚Üípiloto‚Üíscale) com gates de investimento."]
    if alinhamento_label == "M√©dio":
        ajustar += ["Refor√ßar elo entre objetivos do projeto e Vis√£o 2028 (benef√≠cio para cliente + tese de valor de longo prazo)."]
    if alinhamento_label == "Baixo":
        ajustar += ["Reenquadrar escopo para pilar dominante E‚ÄëC‚ÄëK ou reavaliar tese; considerar realoca√ß√£o de CAPEX."]

    # Parar (quando aplic√°vel)
    if sentido == "N√£o":
        parar += ["Evitar comprometer CAPEX significativo at√© elevar o alinhamento estrat√©gico e reduzir riscos principais."]

    # LEAN MODE ‚Äì sintetiza bullets
    if LEAN_MODE:
        continuar = continuar[:1] or ["Manter disciplina no pilar dominante."]
        ajustar = ajustar[:1] or ["Ajustar premissas para elevar o fit estrat√©gico."]
        parar = parar[:1] if parar else []

    analise = {
        "alinhamento_score": alinhamento_score,      # 0..100
        "alinhamento_label": alinhamento_label,      # Alto/M√©dio/Baixo
        "portfolio_fit": portfolio_fit,              # Core/Opcionalidade/Explorat√≥rio/Indefinido
        "portfolio_msg": portfolio_msg,
        "proposito_valores_bonus": pv_bonus,         # 0..10
        "faz_sentido": sentido,                      # Sim/Parcialmente/N√£o
        "rota_recomendada": rota,                    # Acelerar/Seguir/Seguir com salvaguardas/Pausar/Pivotar
        "rota_msg": rota_msg,
        "recomendacoes_continuar": continuar,
        "recomendacoes_ajustar": ajustar,
        "recomendacoes_parar": parar,
        "pilar_estrategico_foco": p_final,
    }
    return analise

# -------------------------------------------------------------------------------------------------
# Formata√ß√£o (TXT/MD/HTML) - inclui se√ß√£o estrat√©gica
# -------------------------------------------------------------------------------------------------
def format_report(campos: Dict[str, Any],
                  campos_num: Dict[str, Optional[float]],
                  score: float,
                  risco: str,
                  pilar_declarado: str,
                  pilar_final: str,
                  justificativa_eck_txt: str,
                  proximos_passos_recomendado: List[str],
                  proximos_passos_atual: List[str],
                  kpis: Dict[str, Any],
                  riscos_chave: List[str],
                  divergente: bool,
                  pilar_sugerido: Optional[str],
                  justificativa_sugerido: Optional[str],
                  strategy: Dict[str, Any],
                  licoes: List[Dict[str, str]],
                  analise: Dict[str, Any]) -> Dict[str, str]:

    nome = campos.get("nome_projeto", "Projeto n√£o identificado") or "Projeto n√£o identificado"
    cpi = campos.get("cpi", "N√£o informado")
    spi = campos.get("spi", "N√£o informado")
    fisico = campos.get("avanco_fisico", "N√£o informado")
    financeiro_pf = campos.get("avanco_financeiro", "N√£o informado")
    contrato = campos.get("tipo_contrato", "N√£o informado")
    stakeholders = campos.get("stakeholders", "N√£o informado")
    observacoes = campos.get("observacoes", "N√£o informado")
    objetivo = campos.get("objetivo", "N√£o informado")
    resumo_status = campos.get("resumo_status") or []
    planos = campos.get("planos_proximo_periodo") or []
    pontos = campos.get("pontos_atencao") or []
    escopo = campos.get("escopo", "N√£o informado")
    data_final = campos.get("data_final_planejada", "N√£o informado")
    ind = campos.get("indicadores") or {}
    isp = ind.get("isp"); idp = ind.get("idp"); idco = ind.get("idco"); idb = ind.get("idb")
    fin = campos.get("financeiro") or {}
    capex_aprovado = fin.get("capex_aprovado") or (campos.get("baseline", {}).get("custo", {}) or {}).get("capex_aprovado")
    capex_comp = fin.get("capex_comp") or fin.get("capex comprometido")
    capex_exec = fin.get("capex_exec") or fin.get("capex executado")
    ev = fin.get("ev"); pv = fin.get("pv"); ac = fin.get("ac"); eac = fin.get("eac"); vac = fin.get("vac")
    risco_emoji = {"Alto": "üî¥", "M√©dio": "üü†", "Baixo": "üü¢"}.get(risco, "‚ö†Ô∏è")

    # --- Texto (para A360) ---
    txt: List[str] = []
    txt += [
        f"üìä Relat√≥rio Executivo Preditivo ‚Äì Projeto ‚Äú{nome}‚Äù",
        "",
        "‚úÖ Status Geral",
        f"CPI: {cpi}",
        f"SPI: {spi}",
        f"Avan√ßo F√≠sico: {fisico}",
        f"Avan√ßo Financeiro: {financeiro_pf}",
        f"Tipo de Contrato: {contrato}",
        f"Stakeholders: {stakeholders}",
        f"Risco (classifica√ß√£o): {risco} {risco_emoji} (score interno: {score:.1f})",
        f"Observa√ß√£o: {observacoes}",
    ]
    if escopo and escopo != "N√£o informado":
        txt += [f"Escopo: {escopo}"]
    if data_final and data_final != "N√£o informado":
        txt += [f"Data Final Planejada: {data_final}"]

    txt += ["", "üéØ Objetivo do Projeto", f"{objetivo if objetivo!='N√£o informado' else '‚Äî'}"]

    # Resumo/Planos/Pontos
    if resumo_status:
        txt += ["", "üìù RESUMO DA SITUA√á√ÉO ATUAL (PROGRESSO) E A√á√ïES CORRETIVAS REALIZADAS"]
        txt += [f"- {b}" for b in resumo_status]
    if planos:
        txt += ["", "üìÖ PLANOS PARA O PR√ìXIMO PER√çODO"]
        txt += [f"- {b}" for b in planos]
    if pontos:
        txt += ["", "üîé PONTOS DE ATEN√á√ÉO"]
        txt += [f"- {b}" for b in pontos]

    # KPIs
    txt += ["", "üìà Diagn√≥stico de Performance"]
    txt += [
        f"- Custo: CPI em {cpi} ‚Üí disciplina or√ßament√°ria.",
        f"- Prazo: SPI em {spi} ‚Üí gest√£o de caminho cr√≠tico.",
        f"- Execu√ß√£o: f√≠sico ({fisico}) vs. financeiro ({financeiro_pf}).",
        f"- Contrato: ‚Äú{contrato}‚Äù ‚Üí refor√ßar governan√ßa de escopo/custos.",
    ]
    if kpis.get("gap_pf") is not None:
        txt.append(f"- Gap f√≠sico x financeiro: {kpis['gap_pf']:.1f}pp.")
    # √çndices meta 1,00
    if any(x is not None for x in (isp, idp, idco, idb)):
        txt += ["- Indicadores de desempenho (meta = 1,00):"]
        if isp is not None: txt.append(f" ‚Ä¢ ISP: {isp}")
        if idp is not None: txt.append(f" ‚Ä¢ IDP: {idp}")
        if idco is not None: txt.append(f" ‚Ä¢ IDCo: {idco}")
        if idb is not None: txt.append(f" ‚Ä¢ IDB: {idb}")

    # Financeiro (resumo)
    if FEATURES["enable_finance_pack"] and any([capex_aprovado, capex_comp, capex_exec, ev, pv, ac, eac, vac]):
        txt += ["", "üí∞ Financeiro (resumo)"]
        if capex_aprovado: txt.append(f"- CAPEX Aprovado: {capex_aprovado}")
        if capex_comp: txt.append(f"- CAPEX Comprometido: {capex_comp}")
        if capex_exec: txt.append(f"- CAPEX Executado: {capex_exec}")
        evpvac = []
        if ev is not None: evpvac.append(f"EV={ev}")
        if pv is not None: evpvac.append(f"PV={pv}")
        if ac is not None: evpvac.append(f"AC={ac}")
        if eac is not None: evpvac.append(f"EAC={eac}")
        if vac is not None: evpvac.append(f"VAC={vac}")
        if evpvac:
            txt.append("- " + ", ".join(evpvac))

    # Riscos-chave
    if riscos_chave:
        txt += ["", "‚ö†Ô∏è Riscos‚Äëchave identificados"]
        txt += [f"- {r}" for r in riscos_chave]

    # Proje√ß√£o e Recomenda√ß√µes gerais
    txt += [
        "",
        "üìÖ Proje√ß√£o de Impactos",
        "- Curto prazo: risco de novos atrasos e press√£o de custos.",
        "- M√©dio prazo: impacto em marcos contratuais e metas estrat√©gicas.",
        "- Stakeholders: intensificar monitoramento e comunica√ß√£o executiva.",
        "",
        "üß† Recomenda√ß√µes Estrat√©gicas (metas gerais)",
        "- Revisar caminho cr√≠tico e renegociar entregas cr√≠ticas.",
        "- Metas-alvo: CPI ‚â• 0,90 e SPI ‚â• 0,95.",
        "- Integrar √°reas e refor√ßar controle de produtividade.",
        "",
        "üèõÔ∏è Pilar ECK (foco estrat√©gico)",
    ]
    if pilar_declarado != "N√£o informado":
        txt.append(f"- Pilar declarado: {pilar_declarado}")
    if divergente and pilar_sugerido:
        txt.append(f"- Pilar sugerido (an√°lise): {pilar_sugerido} ‚ö†Ô∏è (recomendado realinhar)")
    if justificativa_sugerido: txt.append(f"- Justificativa (sugerido): {justificativa_sugerido}")
    txt.append(f"- Justificativa (atual): {justificativa_eck_txt}")

    # Strategy fit
    if FEATURES["enable_strategy_fit"] and strategy.get("score") is not None:
        txt += ["", "üìê Strategy Fit (ECK)"]
        txt += [f"- Score (0-100): {strategy.get('score')}"]
        if strategy.get("pilar_sugerido"):
            txt.append(f"- Pilar dominante sugerido: {strategy['pilar_sugerido']}")

    # Pr√≥ximos Passos (2 trilhas)
    if proximos_passos_recomendado:
        txt += ["", "‚ñ∂ Pr√≥ximos Passos ‚Äî (Recomendado, alinhado ao Pilar sugerido)"]
        txt += [f"- {p}" for p in proximos_passos_recomendado]
    if proximos_passos_atual:
        txt += ["", "‚ñ∂ Pr√≥ximos Passos ‚Äî (Atual, alinhado ao Pilar declarado)"]
        txt += [f"- {p}" for p in proximos_passos_atual]

    # Li√ß√µes aprendidas
    if licoes:
        txt += ["", "üìö Li√ß√µes Aprendidas (sugeridas)"]
        for it in licoes:
            txt += [
                f"- Problema: {it['problema']}",
                f" ‚Ä¢ Causa-raiz: {it['causa_raiz']}",
                f" ‚Ä¢ Contramedida: {it['contramedida']}",
                f" ‚Ä¢ Owner: {it['owner']} ‚Ä¢ Prazo: {it['prazo']} ‚Ä¢ Categoria: {it['categoria']}",
            ]

    # üß≠ NOVA SE√á√ÉO: An√°lise Estrat√©gica
    if FEATURES["enable_strategic_analysis"]:
        txt += ["", "üß≠ An√°lise Estrat√©gica"]
        if LEAN_MODE:
            txt += [
                f"- Alinhamento com Vis√£o (E‚ÄëC‚ÄëK): {analise['alinhamento_label']} ({analise['alinhamento_score']})",
                f"- Fit de Portf√≥lio: {analise['portfolio_fit']} ‚Äî {analise['portfolio_msg']}",
                f"- Rota: {analise['rota_recomendada']} ‚Äî {analise['rota_msg']}",
            ]
        else:
            txt += [
                f"- Alinhamento com Vis√£o (E‚ÄëC‚ÄëK): {analise['alinhamento_label']} ({analise['alinhamento_score']})",
                f"- Pilar de foco: {analise['pilar_estrategico_foco']}",
                f"- Prop√≥sito & Valores (b√¥nus): +{analise['proposito_valores_bonus']}/10",
                f"- Fit de Portf√≥lio: {analise['portfolio_fit']} ‚Äî {analise['portfolio_msg']}",
                f"- Faz sentido para a companhia? {analise['faz_sentido']}",
                f"- Rota recomendada: {analise['rota_recomendada']} ‚Äî {analise['rota_msg']}",
                "",
                "‚Ä¢ Continuar",
            ]
            if analise["recomendacoes_continuar"]:
                txt += [f"  - {b}" for b in analise["recomendacoes_continuar"]]
            else:
                txt += ["  - ‚Äî"]
            txt += ["‚Ä¢ Ajustar"]
            if analise["recomendacoes_ajustar"]:
                txt += [f"  - {b}" for b in analise["recomendacoes_ajustar"]]
            else:
                txt += ["  - ‚Äî"]
            if analise["recomendacoes_parar"]:
                txt += ["‚Ä¢ Parar/Evitar"]
                txt += [f"  - {b}" for b in analise["recomendacoes_parar"]]

    # Resumo executivo
    txt += ["", "‚úÖ Resumo Executivo"]
    resumo_pilar_txt = (pilar_sugerido or pilar_final) if (divergente and pilar_sugerido) else (pilar_declarado if pilar_declarado != "N√£o informado" else pilar_final)
    txt.append(
        f"O projeto ‚Äú{nome}‚Äù requer aten√ß√£o {risco.lower()} "
        f"{({'Alto':'üî¥','M√©dio':'üü†','Baixo':'üü¢'}.get(risco,'‚ö†Ô∏è'))}. "
        f"Considerar foco no pilar {resumo_pilar_txt} e disciplina de execu√ß√£o para assegurar valor e entrega."
    )

    txt_report = "\n".join(txt)
    md_report = txt_report
    html_report = html.escape(txt_report).replace("\n", "<br/>")
    return {"txt": txt_report.strip(), "md": md_report.strip(), "html": html_report}

# -------------------------------------------------------------------------------------------------
# Helpers de evid√™ncias externas (stub)
# -------------------------------------------------------------------------------------------------
def buscar_evidencias_externas(topicos: List[str]) -> List[str]:
    if not FEATURES["enable_external_evidence"]:
        return []
    # Stub: integrar se necess√°rio via httpx/requests com allowlist
    return []

# -------------------------------------------------------------------------------------------------
# Core: _analisar
# -------------------------------------------------------------------------------------------------
def _analisar(campos: Dict[str, Any]) -> Dict[str, Any]:
    trace: List[str] = []

    # N√∫meros normalizados base
    campos_num = {
        "cpi_num": to_number(campos.get("cpi")),
        "spi_num": to_number(campos.get("spi")),
        "avanco_fisico_num": percent_to_number(campos.get("avanco_fisico")),
        "avanco_financeiro_num": percent_to_number(campos.get("avanco_financeiro")),
    }

    # Indicadores meta 1,00
    ind_raw = campos.get("indicadores") or {}
    indicadores = {
        "isp": to_number(ind_raw.get("isp")),
        "idp": to_number(ind_raw.get("idp")),
        "idco": to_number(ind_raw.get("idco")),
        "idb": to_number(ind_raw.get("idb")),
    }

    # Cronograma
    tarefas: List[Dict[str, Any]] = []
    if (campos.get("cronograma") or {}).get("tarefas"):
        for t in campos["cronograma"]["tarefas"]:
            tarefas.append({
                "nome": t.get("nome"),
                "inicio": t.get("inicio") if isinstance(t.get("inicio"), date) else parse_date(t.get("inicio")),
                "fim": t.get("fim") if isinstance(t.get("fim"), date) else parse_date(t.get("fim")),
                "pct": t.get("pct") if isinstance(t.get("pct"), (int, float)) else to_number(t.get("pct")),
                "critica": bool(t.get("critica")),
            })

    # Baseline e financeiro
    baseline = campos.get("baseline") or {}
    fin_raw = campos.get("financeiro") or {}
    fin = {
        "capex_aprovado": fin_raw.get("capex_aprovado") or ((baseline.get("custo") or {}).get("capex_aprovado")),
        "capex_comp": fin_raw.get("capex_comp") or fin_raw.get("capex comprometido"),
        "capex_exec": fin_raw.get("capex_exec") or fin_raw.get("capex executado"),
        "ev": fin_raw.get("ev"), "pv": fin_raw.get("pv"), "ac": fin_raw.get("ac"),
        "eac": fin_raw.get("eac"), "vac": fin_raw.get("vac"),
    }

    # KPIs auxiliares
    gap_pf = None
    if campos_num["avanco_fisico_num"] is not None and campos_num["avanco_financeiro_num"] is not None:
        gap_pf = abs(campos_num["avanco_fisico_num"] - campos_num["avanco_financeiro_num"])
    kpis = {
        "gap_pf": gap_pf,
        "gap_spi": (TARGETS["spi"] - campos_num["spi_num"]) if campos_num["spi_num"] is not None else None,
        "gap_cpi": (TARGETS["cpi"] - campos_num["cpi_num"]) if campos_num["cpi_num"] is not None else None,
    }

    # Pilar (declarado x sugerido)
    pilar_declarado = campos.get("pilar", "N√£o informado")
    pilar_inferido = inferir_pilar(campos, campos_num, indicadores, trace)  # pode ser None

    # Diverg√™ncia
    def _norm(s): return normalize(s or "")
    divergente = (
        pilar_declarado and pilar_declarado != "N√£o informado" and
        pilar_inferido and _norm(pilar_declarado) != _norm(pilar_inferido)
    )

    # Pilar final (pol√≠tica: se declararam, prevalece; sen√£o usa inferido)
    pilar_final = pilar_declarado if (pilar_declarado and pilar_declarado != "N√£o informado") else (pilar_inferido or "N√£o informado")
    if divergente:
        trace.append(f"Diverg√™ncia Pilar: declarado='{pilar_declarado}' vs sugerido='{pilar_inferido}'")

    # Score de risco total
    score = 0.0
    score += calcular_score_risco_base(campos_num, campos.get("observacoes", ""), trace)
    score += risco_por_indices(indicadores, trace)
    if FEATURES["enable_schedule_pack"]:
        score += risco_por_cronograma(tarefas, trace)
    if FEATURES["enable_finance_pack"]:
        score += risco_por_baseline_financeiro(baseline, fin, trace)
    classificacao = classificar_risco(score)

    # Pr√≥ximos passos ‚Äî 2 trilhas
    pilar_para_recomendado = pilar_inferido or pilar_final
    proximos_recomendado = gerar_proximos_passos(
        cpi=campos_num["cpi_num"], spi=campos_num["spi_num"], gap_pf=gap_pf,
        obs=campos.get("observacoes", ""), pilar_final=pilar_para_recomendado,
        stakeholders=campos.get("stakeholders", "N√£o informado"),
    )
    proximos_atual = gerar_proximos_passos(
        cpi=campos_num["cpi_num"], spi=campos_num["spi_num"], gap_pf=gap_pf,
        obs=campos.get("observacoes", ""), pilar_final=pilar_declarado if pilar_declarado else "N√£o informado",
        stakeholders=campos.get("stakeholders", "N√£o informado"),
    )

    # Riscos-chave
    riscos_chave = listar_riscos(campos_num, campos.get("observacoes", ""), indicadores, tarefas, baseline, fin)

    # Strategy fit
    strategy = strategy_fit(campos, campos_num, indicadores)

    # Li√ß√µes aprendidas
    licoes = gerar_licoes_aprendidas(campos, campos_num, kpis, tarefas, riscos_chave)

    # Justificativas
    justificativa_final = justificativa_pilar_eck(pilar_final)
    justificativa_sugerido = justificativa_pilar_eck(pilar_inferido) if pilar_inferido else None

    # NOVO: An√°lise Estrat√©gica
    analise = analise_estrategica(
        campos=campos,
        strategy=strategy,
        classificacao_risco=classificacao,
        divergente=divergente,
        pilar_declarado=pilar_declarado,
        pilar_sugerido=pilar_inferido
    ) if FEATURES["enable_strategic_analysis"] else {}

    # Relat√≥rios
    reports = format_report(
        campos=campos, campos_num=campos_num, score=score, risco=classificacao,
        pilar_declarado=pilar_declarado, pilar_final=pilar_final,
        justificativa_eck_txt=justificativa_final,
        proximos_passos_recomendado=proximos_recomendado,
        proximos_passos_atual=proximos_atual,
        kpis=kpis, riscos_chave=riscos_chave,
        divergente=divergente, pilar_sugerido=pilar_inferido,
        justificativa_sugerido=justificativa_sugerido,
        strategy=strategy, licoes=licoes,
        analise=analise
    )

    payload_out = {
        "versao_api": app.version,
        "campos_interpretados": {**campos, **campos_num, "pilar_final": pilar_final},
        "indicadores": indicadores,
        "kpis": kpis,
        "score_risco": score,
        "classificacao_risco": classificacao,
        "riscos_chave": riscos_chave,
        "strategy_fit": strategy,
        "pilar_declarado": pilar_declarado,
        "pilar_sugerido": pilar_inferido,
        "pilar_divergente": divergente,
        "proximos_passos_recomendado": proximos_recomendado,
        "proximos_passos_atual": proximos_atual,
        "licoes_aprendidas": licoes,
        "analise_estrategica": analise,  # NOVO: objeto estruturado
        "conclusao_executiva": reports["txt"],                 # compat A360 (TXT)
        "conclusao_executiva_markdown": reports["md"],         # extras
        "conclusao_executiva_html": reports["html"],           # extras
        "trace": trace,
    }
    return payload_out

# -------------------------------------------------------------------------------------------------
# Endpoints
# -------------------------------------------------------------------------------------------------
@app.get("/health")
def health():
    return {"status": "ok", "version": app.version}

@app.post("/analisar-projeto-texto")
async def analisar_projeto_texto(payload: TextoRequest):
    campos = parse_from_text(payload.texto)
    return _analisar(campos)

@app.post("/analisar-projeto")
async def analisar_projeto(payload: ProjetoRequest):
    campos: Dict[str, Any] = {
        "nome_projeto": payload.nome_projeto or "N√£o informado",
        "cpi": payload.cpi or "N√£o informado",
        "spi": payload.spi or "N√£o informado",
        "avanco_fisico": payload.avanco_fisico or "N√£o informado",
        "avanco_financeiro": payload.avanco_financeiro or "N√£o informado",
        "tipo_contrato": payload.tipo_contrato or "N√£o informado",
        "stakeholders": payload.stakeholders or "N√£o informado",
        "observacoes": payload.observacoes or "N√£o informado",
        "pilar": payload.pilar or "N√£o informado",
        "objetivo": payload.objetivo or "N√£o informado",
        "resumo_status": payload.resumo_status or [],
        "planos_proximo_periodo": payload.planos_proximo_periodo or [],
        "pontos_atencao": payload.pontos_atencao or [],
        "indicadores": payload.indicadores or {},
        "data_final_planejada": payload.data_final_planejada or "N√£o informado",
        "baseline": payload.baseline or {},
        "escopo": payload.escopo or "N√£o informado",
        "cronograma": payload.cronograma or {"tarefas": []},
        "financeiro": payload.financeiro or {},
    }
    return _analisar(campos)
